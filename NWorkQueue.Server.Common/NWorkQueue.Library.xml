<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NWorkQueue.Server.Common</name>
    </assembly>
    <members>
        <member name="P:NWorkQueue.Server.Common.ApiResult.IsSuccess">
            <summary>
            Gets a value indicating whether an api call was successful? This should be the only way to determine if a call was successfull.
            </summary>
        </member>
        <member name="T:NWorkQueue.Server.Common.InternalApi">
            <summary>
            Starting point for accessing all queue related APIS
            This is mostly a factory for creating Queues and Transactions.
            </summary>
            <remarks>
            Exceptions are not used unless there is an exceptional condition.  For example, if an items doesn't exist or a param is invalid, 
            this is handled without an exception.  This is mostly for speed and simplicity with the gRPC interface.
            </remarks>
        </member>
        <member name="M:NWorkQueue.Server.Common.InternalApi.#ctor(NWorkQueue.Common.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Server.Common.InternalApi"/> class.
            </summary>
        </member>
        <member name="M:NWorkQueue.Server.Common.InternalApi.CreateQueue(System.String)">
            <summary>
            Creates a new queue.
            </summary>
            <param name="queueName">The name of the queue.</param>
            <returns>A Queue object.</returns>
        </member>
        <member name="M:NWorkQueue.Server.Common.InternalApi.DeleteQueue(System.String)">
            <summary>
            Delete a queue and all messages in the queue.
            </summary>
            <param name="queueName">Name of the queue to delete.</param>
        </member>
        <member name="M:NWorkQueue.Server.Common.InternalApi.DeleteQueue(System.Int64)">
            <summary>
            Deletes a queue and 1) rollsback any transaction related to the queue, 2) deletes all messages in the queue.
            </summary>
            <param name="queueId">Queue id.</param>
        </member>
        <member name="M:NWorkQueue.Server.Common.InternalApi.Dispose">
            <summary>
            Disposes of storage resources
            </summary>
        </member>
        <member name="T:NWorkQueue.Server.Common.Message">
            <summary>
            APIS's for accessing and manging queue messages.
            </summary>
        </member>
        <member name="M:NWorkQueue.Server.Common.Message.#ctor(NWorkQueue.Common.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Server.Common.Message"/> class.
            </summary>
            <param name="storage">Storage library.</param>
        </member>
        <member name="T:NWorkQueue.Server.Common.Queue">
            <summary>
            Queue API from which to manage queue.
            </summary>
        </member>
        <member name="M:NWorkQueue.Server.Common.Queue.#ctor(NWorkQueue.Common.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Server.Common.Queue"/> class.
            </summary>
            <param name="storage">storage engine</param>
        </member>
        <member name="M:NWorkQueue.Server.Common.Queue.Create(System.String)">
            <summary>
            Creates a new queue. Queue cannot already exist
            </summary>
            <param name="name">Name of queue to create</param>
            <returns>The queue Id</returns>
        </member>
        <member name="M:NWorkQueue.Server.Common.Queue.AddMessage(NWorkQueue.Server.Common.Transaction,System.Object,System.String,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Int32,System.String)">
            <summary>
            Adds a message to a queue.
            </summary>
            <param name="transId">Queue Transaction id.  All messages must be added in a transaction.</param>
            <param name="queueId">The queue id to add the message to.</param>
            <param name="message">Message object to be serialized.</param>
            <param name="metaData">String of optional data describing the message.</param>
            <param name="priority">Message priority.  Lower the number, the higher the priority.</param>
            <param name="maxRetries">How many failures before the message will be expired.</param>
            <param name="rawExpiryDateTime">Datetime that the message will expire if it's not already been processed.</param>
            <param name="correlation">Optional correlation id.  ID's are defined by the calling application.</param>
            <param name="groupName" >Optional group string.  Defined by calling application.</param>
            <returns>Message ID.</returns>
        </member>
        <member name="T:NWorkQueue.Server.Common.ResultCode">
            <summary>
            Result codes from internal API calls.  This currently map directly to gRPC status codes, but
            the internal api may be used with another protocol, hence it can't depend on gRPC status codes.
            Most of these are not used by the Internal API.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.Ok">
            <summary>
            Not an error; returned on success.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.Cancelled">
            <summary>
            The operation was cancelled (typically by the caller).
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.Unknown">
            <summary>
            Unknown error. An example of where this error may be returned is if a Status
            value received from another address space belongs to an error-space that is not
            known in this address space. Also errors raised by APIs that do not return enough
            error information may be converted to this error.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.InvalidArgument">
            <summary>
            Client specified an invalid argument. Note that this differs from FAILED_PRECONDITION.
            INVALID_ARGUMENT indicates arguments that are problematic regardless of the state
            of the system (e.g., a malformed file name).
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.DeadlineExceeded">
            <summary>
            Deadline expired before operation could complete. For operations that change
            the state of the system, this error may be returned even if the operation has
            completed successfully. For example, a successful response from a server could
            have been delayed long enough for the deadline to expire.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.NotFound">
            <summary>
            Some requested entity (e.g., file or directory) was not found.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.AlreadyExists">
            <summary>
            Some entity that we attempted to create (e.g., file or directory) already exists.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.PermissionDenied">
            <summary>
            The caller does not have permission to execute the specified operation. PERMISSION_DENIED
            must not be used for rejections caused by exhausting some resource (use RESOURCE_EXHAUSTED
            instead for those errors). PERMISSION_DENIED must not be used if the caller can
            not be identified (use UNAUTHENTICATED instead for those errors).
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.ResourceExhausted">
            <summary>
                Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire
                file system is out of space.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.FailedPrecondition">
            <summary>
            Operation was rejected because the system is not in a state required for the
            operation's execution. For example, directory to be deleted may be non-empty,
            an rmdir operation is applied to a non-directory, etc.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.Aborted">
            <summary>
            The operation was aborted, typically due to a concurrency issue like sequencer
            check failures, transaction aborts, etc.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.OutOfRange">
            <summary>
            Operation was attempted past the valid range. E.g., seeking or reading past end
            of file.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.Unimplemented">
            <summary>
            Operation is not implemented or not supported/enabled in this service.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.Internal">
            <summary>
            Internal errors. Means some invariants expected by underlying system has been
            broken. If you see one of these errors, something is very broken.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.Unavailable">
            <summary>
            The service is currently unavailable. This is a most likely a transient condition
            and may be corrected by retrying with a backoff. Note that it is not always safe
            to retry non-idempotent operations.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.DataLoss">
            <summary>
            Unrecoverable data loss or corruption.
            </summary>
        </member>
        <member name="F:NWorkQueue.Server.Common.ResultCode.Unauthenticated">
            <summary>
            The request does not have valid authentication credentials for the operation.
            </summary>
        </member>
        <member name="T:NWorkQueue.Server.Common.Transaction">
            <summary>
            Represents a Queue Transaction.  Most message functions require a transaction
            </summary>
        </member>
        <member name="M:NWorkQueue.Server.Common.Transaction.#ctor(NWorkQueue.Common.IStorage)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Server.Common.Transaction"/> class.
            </summary>
            <param name="storage">An IStorage interface</param>
        </member>
        <member name="M:NWorkQueue.Server.Common.Transaction.Start">
            <summary>
            Start Queue Transaction.
            </summary>
            <returns>Queue Transaction id of the new transaction</returns>
        </member>
        <member name="M:NWorkQueue.Server.Common.Transaction.UpdateTransaction(System.Int64)">
            <summary>
            Updates the specified transaction, reseting it's timeout
            </summary>
            <param name="transId">Queue Transaction id</param>
            <returns>Enum detailing if update was successul</returns>
        </member>
        <member name="M:NWorkQueue.Server.Common.Transaction.GetMessageCount(System.Int64)">
            <summary>
            Returns the message count of messages in a specific transaction. Results are unknown for closed committed or rolledback transactions.
            </summary>
            <param name="transId">Transaction id</param>
            <returns>Message count</returns>
        </member>
        <member name="M:NWorkQueue.Server.Common.Transaction.Commit">
            <summary>
            Commits the Queue Transaction
            </summary>
            <param name="transId">Queue transaction id</param>
            <returns>Was the commit successful</returns>
        </member>
        <member name="M:NWorkQueue.Server.Common.Transaction.RollbackTransaction(System.Int64)">
            <summary>
            Rollsback the Queue transaction and resets the messages states or doesn't add messages
            </summary>
            <param name="transId">Queue transaction id</param>
        </member>
    </members>
</doc>
