syntax = "proto3";

option csharp_namespace = "NWorkQueue.Models";

import "google/protobuf/timestamp.proto";

package greet;

// The service definition.  All should start with a verb.
service QueueApi {
  rpc CreateQueue (CreateQueueRequest) returns (CreateQueueResponse);
  rpc InitializeStorage (InitializeStorageRequest) returns (InitializeStorageResponse);
  rpc DeleteQueueById (DeleteQueueByIdRequest) returns (DeleteQueueByIdResponse);
  rpc DeleteQueueByName (DeleteQueueByNameRequest) returns (DeleteQueueByNameResponse);
  rpc GetQueueInfoById (GetQueueInfoByIdRequest) returns (GetQueueInfoResponse);
  rpc GetQueueInfoByName (GetQueueInfoByNameRequest) returns (GetQueueInfoResponse);
  rpc StartTransaction (StartTransactionRequest) returns (StartTransactionResponse);
  rpc CommitTransaction (CommitTransactionRequest) returns (CommitTransactionResponse);
  rpc RollbackTranaction (RollbackTransactionRequest) returns (RollbackTransactionResponse);
  rpc QueueMessage (QueueMessageRequest) returns (QueueMessageResponse);
  rpc DequeueMessage (DequeueMessageRequest) returns (DequeueMessageResponse);
  rpc PeekMessageByQueue (PeekMessageByQueueRequest) returns (PeekMessageByQueueResponse);
  rpc PeekMessageById (PeekMessageByIdRequest) returns (PeekMessageByIdResponse);
}

message GetQueueInfoResponse {
  bool RecordFound = 1;
  int64 QueueId = 2;
  string QueueName = 3;
}

message GetQueueInfoByNameRequest {
  string QueueName = 1;
}

message GetQueueInfoByIdRequest {
  int64 QueueId = 1;
}

// The request message containing the user's name.
message CreateQueueRequest {
  string QueueName = 1;
}

// The response message containing the greetings.
message CreateQueueResponse {
  int64 QueueId = 1;
  // Standardized Name
  string QueueName = 2;
}

message InitializeStorageRequest {
  bool DeleteExistingData = 1;
}

message InitializeStorageResponse {
}

message DeleteQueueByIdRequest {
  int64 QueueId = 1;
}

message DeleteQueueByIdResponse {
}

message DeleteQueueByNameRequest {
  string QueueName = 1;
}

message DeleteQueueByNameResponse {
}

message StartTransactionRequest {
  int32 ExpireInMin = 1;
}

message StartTransactionResponse {
  int64 TransId = 1;
}

message CommitTransactionRequest {
  int64 TransId = 1;
}

message CommitTransactionResponse {
  int32 MessagesAdded = 1;
  int32 MessagesPulled = 2;
}

message RollbackTransactionRequest {
  int64 TransId = 1;
}

message RollbackTransactionResponse {
}

message QueueMessageRequest {
  // Queue Transaction id.  All messages must be added in a transaction.
  int64 TransId = 1;
  int64 QueueId = 2;
  MessageIn Message = 3;
}

message MessageIn {
  // Message object to be serialized.
  bytes Payload = 2;
  // String of optional data describing the message.
  string MetaData = 3;
  // Message priority.  Lower the number, the higher the priority.
  int32 Priority = 4;
  // tries">How many failures before the message will be expired.
  int32 MaxAttempts = 5;
  // Message will expire after this many minutes if not already processed or in a transaction. Zero indicates no expiration.
  int32 ExpiryInMinutes = 6;
  // Optional correlation id. ID's are defined by the calling application.
  int32 CorrelationId = 7;
  // Optional group string. Defined by calling application.
  string GroupName = 8;
}

message MessageOut {
  int64 Id = 1;
  // The queue id to add the message to.
  int64 QueueId = 2;
  // Message object to be serialized.
  bytes Payload = 3;
  // String of optional data describing the message.
  string MetaData = 4;
  // Message priority.  Lower the number, the higher the priority.
  int32 Priority = 5;
  // tries">How many failures before the message will be expired.
  int32 MaxAttempts = 6;
  int32 Attempts = 7;
  // Message expire after this DateTime.
  int64 ExpiryDateTime = 8;
  // Optional correlation id. ID's are defined by the calling application.
  int32 CorrelationId = 9;
  // Optional group string. Defined by calling application.
  string GroupName = 10;
  // State
  MessageState MessageState = 11; 
  int64 AddDateTime = 12;
  int64 CloseDateTime = 13;
  int64 TransId = 14;
  TransactionAction TransAction = 15;
}

enum MessageState {
    Unknown = 0;
    Active = 1; 
    InTransaction = 2;
    Processed = 3;
    Expired = 4;
    AttemptsExceeded = 5;
}

enum TransactionAction {
    None = 0;
    Add = 1;
    Pull = 2;
}

message QueueMessageResponse {
  int64 TransId = 1;
  int64 MessageId = 2;
}

message DequeueMessageRequest {
  int64 QueueId = 1;
  int64 TransId = 2;
  // 0 = all messages
  // int32 MessageCountToRetrieve = 3;
  // If this quantity isn't met, return no records
  //int32 MinumumRequiredMessaages = 4;
}

message DequeueMessageResponse {
  int64 TransId = 1;
  bool MessageFound = 2;
  MessageOut Message = 3;
}

message PeekMessageByQueueRequest {
  int64 QueueId = 1;
}

message PeekMessageByQueueResponse {
  MessageOut Message = 1;
}

message PeekMessageByIdRequest {
  int64 MessageId = 1;
}

message PeekMessageByIdResponse {
  MessageOut Message = 1;
}
