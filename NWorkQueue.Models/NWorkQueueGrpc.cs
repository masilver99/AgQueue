// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NWorkQueue.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace NWorkQueue.Models {
  /// <summary>
  /// The service definition.
  /// </summary>
  public static partial class QueueApi
  {
    static readonly string __ServiceName = "greet.QueueApi";

    static readonly grpc::Marshaller<global::NWorkQueue.Models.CreateQueueRequest> __Marshaller_greet_CreateQueueRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.CreateQueueRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.CreateQueueResponse> __Marshaller_greet_CreateQueueResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.CreateQueueResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.InitializeStorageRequest> __Marshaller_greet_InitializeStorageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.InitializeStorageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.InitializeStorageResponse> __Marshaller_greet_InitializeStorageResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.InitializeStorageResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.DeleteQueueByIdRequest> __Marshaller_greet_DeleteQueueByIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.DeleteQueueByIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.DeleteQueueByIdResponse> __Marshaller_greet_DeleteQueueByIdResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.DeleteQueueByIdResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.DeleteQueueByNameRequest> __Marshaller_greet_DeleteQueueByNameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.DeleteQueueByNameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.DeleteQueueByNameResponse> __Marshaller_greet_DeleteQueueByNameResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.DeleteQueueByNameResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.QueueInfoByIdRequest> __Marshaller_greet_QueueInfoByIdRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.QueueInfoByIdRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.QueueInfoResponse> __Marshaller_greet_QueueInfoResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.QueueInfoResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.QueueInfoByNameRequest> __Marshaller_greet_QueueInfoByNameRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.QueueInfoByNameRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.StartTransactionRequest> __Marshaller_greet_StartTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.StartTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.StartTransactionResponse> __Marshaller_greet_StartTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.StartTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.CommitTransactionRequest> __Marshaller_greet_CommitTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.CommitTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.CommitTransactionResponse> __Marshaller_greet_CommitTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.CommitTransactionResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.RollbackTransactionRequest> __Marshaller_greet_RollbackTransactionRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.RollbackTransactionRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::NWorkQueue.Models.RollbackTransactionResponse> __Marshaller_greet_RollbackTransactionResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::NWorkQueue.Models.RollbackTransactionResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::NWorkQueue.Models.CreateQueueRequest, global::NWorkQueue.Models.CreateQueueResponse> __Method_CreateQueue = new grpc::Method<global::NWorkQueue.Models.CreateQueueRequest, global::NWorkQueue.Models.CreateQueueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateQueue",
        __Marshaller_greet_CreateQueueRequest,
        __Marshaller_greet_CreateQueueResponse);

    static readonly grpc::Method<global::NWorkQueue.Models.InitializeStorageRequest, global::NWorkQueue.Models.InitializeStorageResponse> __Method_InitializeStorage = new grpc::Method<global::NWorkQueue.Models.InitializeStorageRequest, global::NWorkQueue.Models.InitializeStorageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeStorage",
        __Marshaller_greet_InitializeStorageRequest,
        __Marshaller_greet_InitializeStorageResponse);

    static readonly grpc::Method<global::NWorkQueue.Models.DeleteQueueByIdRequest, global::NWorkQueue.Models.DeleteQueueByIdResponse> __Method_DeleteQueueById = new grpc::Method<global::NWorkQueue.Models.DeleteQueueByIdRequest, global::NWorkQueue.Models.DeleteQueueByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteQueueById",
        __Marshaller_greet_DeleteQueueByIdRequest,
        __Marshaller_greet_DeleteQueueByIdResponse);

    static readonly grpc::Method<global::NWorkQueue.Models.DeleteQueueByNameRequest, global::NWorkQueue.Models.DeleteQueueByNameResponse> __Method_DeleteQueueByName = new grpc::Method<global::NWorkQueue.Models.DeleteQueueByNameRequest, global::NWorkQueue.Models.DeleteQueueByNameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteQueueByName",
        __Marshaller_greet_DeleteQueueByNameRequest,
        __Marshaller_greet_DeleteQueueByNameResponse);

    static readonly grpc::Method<global::NWorkQueue.Models.QueueInfoByIdRequest, global::NWorkQueue.Models.QueueInfoResponse> __Method_QueueInfoById = new grpc::Method<global::NWorkQueue.Models.QueueInfoByIdRequest, global::NWorkQueue.Models.QueueInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueueInfoById",
        __Marshaller_greet_QueueInfoByIdRequest,
        __Marshaller_greet_QueueInfoResponse);

    static readonly grpc::Method<global::NWorkQueue.Models.QueueInfoByNameRequest, global::NWorkQueue.Models.QueueInfoResponse> __Method_QueueInfoByName = new grpc::Method<global::NWorkQueue.Models.QueueInfoByNameRequest, global::NWorkQueue.Models.QueueInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueueInfoByName",
        __Marshaller_greet_QueueInfoByNameRequest,
        __Marshaller_greet_QueueInfoResponse);

    static readonly grpc::Method<global::NWorkQueue.Models.StartTransactionRequest, global::NWorkQueue.Models.StartTransactionResponse> __Method_StartTransaction = new grpc::Method<global::NWorkQueue.Models.StartTransactionRequest, global::NWorkQueue.Models.StartTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartTransaction",
        __Marshaller_greet_StartTransactionRequest,
        __Marshaller_greet_StartTransactionResponse);

    static readonly grpc::Method<global::NWorkQueue.Models.CommitTransactionRequest, global::NWorkQueue.Models.CommitTransactionResponse> __Method_CommitTransaction = new grpc::Method<global::NWorkQueue.Models.CommitTransactionRequest, global::NWorkQueue.Models.CommitTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CommitTransaction",
        __Marshaller_greet_CommitTransactionRequest,
        __Marshaller_greet_CommitTransactionResponse);

    static readonly grpc::Method<global::NWorkQueue.Models.RollbackTransactionRequest, global::NWorkQueue.Models.RollbackTransactionResponse> __Method_RollbackTranaction = new grpc::Method<global::NWorkQueue.Models.RollbackTransactionRequest, global::NWorkQueue.Models.RollbackTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RollbackTranaction",
        __Marshaller_greet_RollbackTransactionRequest,
        __Marshaller_greet_RollbackTransactionResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::NWorkQueue.Models.NWorkQueueReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of QueueApi</summary>
    [grpc::BindServiceMethod(typeof(QueueApi), "BindService")]
    public abstract partial class QueueApiBase
    {
      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.CreateQueueResponse> CreateQueue(global::NWorkQueue.Models.CreateQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.InitializeStorageResponse> InitializeStorage(global::NWorkQueue.Models.InitializeStorageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.DeleteQueueByIdResponse> DeleteQueueById(global::NWorkQueue.Models.DeleteQueueByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.DeleteQueueByNameResponse> DeleteQueueByName(global::NWorkQueue.Models.DeleteQueueByNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.QueueInfoResponse> QueueInfoById(global::NWorkQueue.Models.QueueInfoByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.QueueInfoResponse> QueueInfoByName(global::NWorkQueue.Models.QueueInfoByNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.StartTransactionResponse> StartTransaction(global::NWorkQueue.Models.StartTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.CommitTransactionResponse> CommitTransaction(global::NWorkQueue.Models.CommitTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      ///rpc QueueMessage
      ///rpc PullMessage
      ///rpc PeelMessage
      ///rpc Subscribe
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::NWorkQueue.Models.RollbackTransactionResponse> RollbackTranaction(global::NWorkQueue.Models.RollbackTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for QueueApi</summary>
    public partial class QueueApiClient : grpc::ClientBase<QueueApiClient>
    {
      /// <summary>Creates a new client for QueueApi</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QueueApiClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for QueueApi that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QueueApiClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QueueApiClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QueueApiClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::NWorkQueue.Models.CreateQueueResponse CreateQueue(global::NWorkQueue.Models.CreateQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NWorkQueue.Models.CreateQueueResponse CreateQueue(global::NWorkQueue.Models.CreateQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateQueue, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.CreateQueueResponse> CreateQueueAsync(global::NWorkQueue.Models.CreateQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.CreateQueueResponse> CreateQueueAsync(global::NWorkQueue.Models.CreateQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateQueue, null, options, request);
      }
      public virtual global::NWorkQueue.Models.InitializeStorageResponse InitializeStorage(global::NWorkQueue.Models.InitializeStorageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeStorage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NWorkQueue.Models.InitializeStorageResponse InitializeStorage(global::NWorkQueue.Models.InitializeStorageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeStorage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.InitializeStorageResponse> InitializeStorageAsync(global::NWorkQueue.Models.InitializeStorageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeStorageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.InitializeStorageResponse> InitializeStorageAsync(global::NWorkQueue.Models.InitializeStorageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeStorage, null, options, request);
      }
      public virtual global::NWorkQueue.Models.DeleteQueueByIdResponse DeleteQueueById(global::NWorkQueue.Models.DeleteQueueByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NWorkQueue.Models.DeleteQueueByIdResponse DeleteQueueById(global::NWorkQueue.Models.DeleteQueueByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteQueueById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.DeleteQueueByIdResponse> DeleteQueueByIdAsync(global::NWorkQueue.Models.DeleteQueueByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.DeleteQueueByIdResponse> DeleteQueueByIdAsync(global::NWorkQueue.Models.DeleteQueueByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteQueueById, null, options, request);
      }
      public virtual global::NWorkQueue.Models.DeleteQueueByNameResponse DeleteQueueByName(global::NWorkQueue.Models.DeleteQueueByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NWorkQueue.Models.DeleteQueueByNameResponse DeleteQueueByName(global::NWorkQueue.Models.DeleteQueueByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteQueueByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.DeleteQueueByNameResponse> DeleteQueueByNameAsync(global::NWorkQueue.Models.DeleteQueueByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.DeleteQueueByNameResponse> DeleteQueueByNameAsync(global::NWorkQueue.Models.DeleteQueueByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteQueueByName, null, options, request);
      }
      public virtual global::NWorkQueue.Models.QueueInfoResponse QueueInfoById(global::NWorkQueue.Models.QueueInfoByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueueInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NWorkQueue.Models.QueueInfoResponse QueueInfoById(global::NWorkQueue.Models.QueueInfoByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueueInfoById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.QueueInfoResponse> QueueInfoByIdAsync(global::NWorkQueue.Models.QueueInfoByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueueInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.QueueInfoResponse> QueueInfoByIdAsync(global::NWorkQueue.Models.QueueInfoByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueueInfoById, null, options, request);
      }
      public virtual global::NWorkQueue.Models.QueueInfoResponse QueueInfoByName(global::NWorkQueue.Models.QueueInfoByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueueInfoByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NWorkQueue.Models.QueueInfoResponse QueueInfoByName(global::NWorkQueue.Models.QueueInfoByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueueInfoByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.QueueInfoResponse> QueueInfoByNameAsync(global::NWorkQueue.Models.QueueInfoByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueueInfoByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.QueueInfoResponse> QueueInfoByNameAsync(global::NWorkQueue.Models.QueueInfoByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueueInfoByName, null, options, request);
      }
      public virtual global::NWorkQueue.Models.StartTransactionResponse StartTransaction(global::NWorkQueue.Models.StartTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NWorkQueue.Models.StartTransactionResponse StartTransaction(global::NWorkQueue.Models.StartTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.StartTransactionResponse> StartTransactionAsync(global::NWorkQueue.Models.StartTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.StartTransactionResponse> StartTransactionAsync(global::NWorkQueue.Models.StartTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartTransaction, null, options, request);
      }
      public virtual global::NWorkQueue.Models.CommitTransactionResponse CommitTransaction(global::NWorkQueue.Models.CommitTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::NWorkQueue.Models.CommitTransactionResponse CommitTransaction(global::NWorkQueue.Models.CommitTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CommitTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.CommitTransactionResponse> CommitTransactionAsync(global::NWorkQueue.Models.CommitTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.CommitTransactionResponse> CommitTransactionAsync(global::NWorkQueue.Models.CommitTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CommitTransaction, null, options, request);
      }
      /// <summary>
      ///rpc QueueMessage
      ///rpc PullMessage
      ///rpc PeelMessage
      ///rpc Subscribe
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NWorkQueue.Models.RollbackTransactionResponse RollbackTranaction(global::NWorkQueue.Models.RollbackTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackTranaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///rpc QueueMessage
      ///rpc PullMessage
      ///rpc PeelMessage
      ///rpc Subscribe
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::NWorkQueue.Models.RollbackTransactionResponse RollbackTranaction(global::NWorkQueue.Models.RollbackTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RollbackTranaction, null, options, request);
      }
      /// <summary>
      ///rpc QueueMessage
      ///rpc PullMessage
      ///rpc PeelMessage
      ///rpc Subscribe
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.RollbackTransactionResponse> RollbackTranactionAsync(global::NWorkQueue.Models.RollbackTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackTranactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///rpc QueueMessage
      ///rpc PullMessage
      ///rpc PeelMessage
      ///rpc Subscribe
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::NWorkQueue.Models.RollbackTransactionResponse> RollbackTranactionAsync(global::NWorkQueue.Models.RollbackTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RollbackTranaction, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override QueueApiClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueueApiClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(QueueApiBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateQueue, serviceImpl.CreateQueue)
          .AddMethod(__Method_InitializeStorage, serviceImpl.InitializeStorage)
          .AddMethod(__Method_DeleteQueueById, serviceImpl.DeleteQueueById)
          .AddMethod(__Method_DeleteQueueByName, serviceImpl.DeleteQueueByName)
          .AddMethod(__Method_QueueInfoById, serviceImpl.QueueInfoById)
          .AddMethod(__Method_QueueInfoByName, serviceImpl.QueueInfoByName)
          .AddMethod(__Method_StartTransaction, serviceImpl.StartTransaction)
          .AddMethod(__Method_CommitTransaction, serviceImpl.CommitTransaction)
          .AddMethod(__Method_RollbackTranaction, serviceImpl.RollbackTranaction).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueueApiBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.CreateQueueRequest, global::NWorkQueue.Models.CreateQueueResponse>(serviceImpl.CreateQueue));
      serviceBinder.AddMethod(__Method_InitializeStorage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.InitializeStorageRequest, global::NWorkQueue.Models.InitializeStorageResponse>(serviceImpl.InitializeStorage));
      serviceBinder.AddMethod(__Method_DeleteQueueById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.DeleteQueueByIdRequest, global::NWorkQueue.Models.DeleteQueueByIdResponse>(serviceImpl.DeleteQueueById));
      serviceBinder.AddMethod(__Method_DeleteQueueByName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.DeleteQueueByNameRequest, global::NWorkQueue.Models.DeleteQueueByNameResponse>(serviceImpl.DeleteQueueByName));
      serviceBinder.AddMethod(__Method_QueueInfoById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.QueueInfoByIdRequest, global::NWorkQueue.Models.QueueInfoResponse>(serviceImpl.QueueInfoById));
      serviceBinder.AddMethod(__Method_QueueInfoByName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.QueueInfoByNameRequest, global::NWorkQueue.Models.QueueInfoResponse>(serviceImpl.QueueInfoByName));
      serviceBinder.AddMethod(__Method_StartTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.StartTransactionRequest, global::NWorkQueue.Models.StartTransactionResponse>(serviceImpl.StartTransaction));
      serviceBinder.AddMethod(__Method_CommitTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.CommitTransactionRequest, global::NWorkQueue.Models.CommitTransactionResponse>(serviceImpl.CommitTransaction));
      serviceBinder.AddMethod(__Method_RollbackTranaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::NWorkQueue.Models.RollbackTransactionRequest, global::NWorkQueue.Models.RollbackTransactionResponse>(serviceImpl.RollbackTranaction));
    }

  }
}
#endregion
