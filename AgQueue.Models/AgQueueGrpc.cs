// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: AgQueue.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace AgQueue.Models {
  /// <summary>
  /// The service definition.  All should start with a verb.
  /// </summary>
  public static partial class QueueApi
  {
    static readonly string __ServiceName = "greet.QueueApi";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::AgQueue.Models.CreateQueueRequest> __Marshaller_greet_CreateQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.CreateQueueRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.CreateQueueResponse> __Marshaller_greet_CreateQueueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.CreateQueueResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.InitializeStorageRequest> __Marshaller_greet_InitializeStorageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.InitializeStorageRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.InitializeStorageResponse> __Marshaller_greet_InitializeStorageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.InitializeStorageResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.DeleteQueueByIdRequest> __Marshaller_greet_DeleteQueueByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.DeleteQueueByIdRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.DeleteQueueByIdResponse> __Marshaller_greet_DeleteQueueByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.DeleteQueueByIdResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.DeleteQueueByNameRequest> __Marshaller_greet_DeleteQueueByNameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.DeleteQueueByNameRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.DeleteQueueByNameResponse> __Marshaller_greet_DeleteQueueByNameResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.DeleteQueueByNameResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.GetQueueInfoByIdRequest> __Marshaller_greet_GetQueueInfoByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.GetQueueInfoByIdRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.GetQueueInfoResponse> __Marshaller_greet_GetQueueInfoResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.GetQueueInfoResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.GetQueueInfoByNameRequest> __Marshaller_greet_GetQueueInfoByNameRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.GetQueueInfoByNameRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.StartTransactionRequest> __Marshaller_greet_StartTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.StartTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.StartTransactionResponse> __Marshaller_greet_StartTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.StartTransactionResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.CommitTransactionRequest> __Marshaller_greet_CommitTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.CommitTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.CommitTransactionResponse> __Marshaller_greet_CommitTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.CommitTransactionResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.RollbackTransactionRequest> __Marshaller_greet_RollbackTransactionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.RollbackTransactionRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.RollbackTransactionResponse> __Marshaller_greet_RollbackTransactionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.RollbackTransactionResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.QueueMessageRequest> __Marshaller_greet_QueueMessageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.QueueMessageRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.QueueMessageResponse> __Marshaller_greet_QueueMessageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.QueueMessageResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.DequeueMessageRequest> __Marshaller_greet_DequeueMessageRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.DequeueMessageRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.DequeueMessageResponse> __Marshaller_greet_DequeueMessageResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.DequeueMessageResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.PeekMessageByQueueRequest> __Marshaller_greet_PeekMessageByQueueRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.PeekMessageByQueueRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.PeekMessageByQueueResponse> __Marshaller_greet_PeekMessageByQueueResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.PeekMessageByQueueResponse.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.PeekMessageByIdRequest> __Marshaller_greet_PeekMessageByIdRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.PeekMessageByIdRequest.Parser));
    static readonly grpc::Marshaller<global::AgQueue.Models.PeekMessageByIdResponse> __Marshaller_greet_PeekMessageByIdResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::AgQueue.Models.PeekMessageByIdResponse.Parser));

    static readonly grpc::Method<global::AgQueue.Models.CreateQueueRequest, global::AgQueue.Models.CreateQueueResponse> __Method_CreateQueue = new grpc::Method<global::AgQueue.Models.CreateQueueRequest, global::AgQueue.Models.CreateQueueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateQueue",
        __Marshaller_greet_CreateQueueRequest,
        __Marshaller_greet_CreateQueueResponse);

    static readonly grpc::Method<global::AgQueue.Models.InitializeStorageRequest, global::AgQueue.Models.InitializeStorageResponse> __Method_InitializeStorage = new grpc::Method<global::AgQueue.Models.InitializeStorageRequest, global::AgQueue.Models.InitializeStorageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "InitializeStorage",
        __Marshaller_greet_InitializeStorageRequest,
        __Marshaller_greet_InitializeStorageResponse);

    static readonly grpc::Method<global::AgQueue.Models.DeleteQueueByIdRequest, global::AgQueue.Models.DeleteQueueByIdResponse> __Method_DeleteQueueById = new grpc::Method<global::AgQueue.Models.DeleteQueueByIdRequest, global::AgQueue.Models.DeleteQueueByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteQueueById",
        __Marshaller_greet_DeleteQueueByIdRequest,
        __Marshaller_greet_DeleteQueueByIdResponse);

    static readonly grpc::Method<global::AgQueue.Models.DeleteQueueByNameRequest, global::AgQueue.Models.DeleteQueueByNameResponse> __Method_DeleteQueueByName = new grpc::Method<global::AgQueue.Models.DeleteQueueByNameRequest, global::AgQueue.Models.DeleteQueueByNameResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteQueueByName",
        __Marshaller_greet_DeleteQueueByNameRequest,
        __Marshaller_greet_DeleteQueueByNameResponse);

    static readonly grpc::Method<global::AgQueue.Models.GetQueueInfoByIdRequest, global::AgQueue.Models.GetQueueInfoResponse> __Method_GetQueueInfoById = new grpc::Method<global::AgQueue.Models.GetQueueInfoByIdRequest, global::AgQueue.Models.GetQueueInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueueInfoById",
        __Marshaller_greet_GetQueueInfoByIdRequest,
        __Marshaller_greet_GetQueueInfoResponse);

    static readonly grpc::Method<global::AgQueue.Models.GetQueueInfoByNameRequest, global::AgQueue.Models.GetQueueInfoResponse> __Method_GetQueueInfoByName = new grpc::Method<global::AgQueue.Models.GetQueueInfoByNameRequest, global::AgQueue.Models.GetQueueInfoResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetQueueInfoByName",
        __Marshaller_greet_GetQueueInfoByNameRequest,
        __Marshaller_greet_GetQueueInfoResponse);

    static readonly grpc::Method<global::AgQueue.Models.StartTransactionRequest, global::AgQueue.Models.StartTransactionResponse> __Method_StartTransaction = new grpc::Method<global::AgQueue.Models.StartTransactionRequest, global::AgQueue.Models.StartTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartTransaction",
        __Marshaller_greet_StartTransactionRequest,
        __Marshaller_greet_StartTransactionResponse);

    static readonly grpc::Method<global::AgQueue.Models.CommitTransactionRequest, global::AgQueue.Models.CommitTransactionResponse> __Method_CommitTransaction = new grpc::Method<global::AgQueue.Models.CommitTransactionRequest, global::AgQueue.Models.CommitTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CommitTransaction",
        __Marshaller_greet_CommitTransactionRequest,
        __Marshaller_greet_CommitTransactionResponse);

    static readonly grpc::Method<global::AgQueue.Models.RollbackTransactionRequest, global::AgQueue.Models.RollbackTransactionResponse> __Method_RollbackTranaction = new grpc::Method<global::AgQueue.Models.RollbackTransactionRequest, global::AgQueue.Models.RollbackTransactionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RollbackTranaction",
        __Marshaller_greet_RollbackTransactionRequest,
        __Marshaller_greet_RollbackTransactionResponse);

    static readonly grpc::Method<global::AgQueue.Models.QueueMessageRequest, global::AgQueue.Models.QueueMessageResponse> __Method_QueueMessage = new grpc::Method<global::AgQueue.Models.QueueMessageRequest, global::AgQueue.Models.QueueMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "QueueMessage",
        __Marshaller_greet_QueueMessageRequest,
        __Marshaller_greet_QueueMessageResponse);

    static readonly grpc::Method<global::AgQueue.Models.DequeueMessageRequest, global::AgQueue.Models.DequeueMessageResponse> __Method_DequeueMessage = new grpc::Method<global::AgQueue.Models.DequeueMessageRequest, global::AgQueue.Models.DequeueMessageResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DequeueMessage",
        __Marshaller_greet_DequeueMessageRequest,
        __Marshaller_greet_DequeueMessageResponse);

    static readonly grpc::Method<global::AgQueue.Models.PeekMessageByQueueRequest, global::AgQueue.Models.PeekMessageByQueueResponse> __Method_PeekMessageByQueue = new grpc::Method<global::AgQueue.Models.PeekMessageByQueueRequest, global::AgQueue.Models.PeekMessageByQueueResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PeekMessageByQueue",
        __Marshaller_greet_PeekMessageByQueueRequest,
        __Marshaller_greet_PeekMessageByQueueResponse);

    static readonly grpc::Method<global::AgQueue.Models.PeekMessageByIdRequest, global::AgQueue.Models.PeekMessageByIdResponse> __Method_PeekMessageById = new grpc::Method<global::AgQueue.Models.PeekMessageByIdRequest, global::AgQueue.Models.PeekMessageByIdResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PeekMessageById",
        __Marshaller_greet_PeekMessageByIdRequest,
        __Marshaller_greet_PeekMessageByIdResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::AgQueue.Models.AgQueueReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of QueueApi</summary>
    [grpc::BindServiceMethod(typeof(QueueApi), "BindService")]
    public abstract partial class QueueApiBase
    {
      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.CreateQueueResponse> CreateQueue(global::AgQueue.Models.CreateQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.InitializeStorageResponse> InitializeStorage(global::AgQueue.Models.InitializeStorageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.DeleteQueueByIdResponse> DeleteQueueById(global::AgQueue.Models.DeleteQueueByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.DeleteQueueByNameResponse> DeleteQueueByName(global::AgQueue.Models.DeleteQueueByNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.GetQueueInfoResponse> GetQueueInfoById(global::AgQueue.Models.GetQueueInfoByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.GetQueueInfoResponse> GetQueueInfoByName(global::AgQueue.Models.GetQueueInfoByNameRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.StartTransactionResponse> StartTransaction(global::AgQueue.Models.StartTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.CommitTransactionResponse> CommitTransaction(global::AgQueue.Models.CommitTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.RollbackTransactionResponse> RollbackTranaction(global::AgQueue.Models.RollbackTransactionRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.QueueMessageResponse> QueueMessage(global::AgQueue.Models.QueueMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.DequeueMessageResponse> DequeueMessage(global::AgQueue.Models.DequeueMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.PeekMessageByQueueResponse> PeekMessageByQueue(global::AgQueue.Models.PeekMessageByQueueRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::AgQueue.Models.PeekMessageByIdResponse> PeekMessageById(global::AgQueue.Models.PeekMessageByIdRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for QueueApi</summary>
    public partial class QueueApiClient : grpc::ClientBase<QueueApiClient>
    {
      /// <summary>Creates a new client for QueueApi</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public QueueApiClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for QueueApi that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public QueueApiClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected QueueApiClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected QueueApiClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::AgQueue.Models.CreateQueueResponse CreateQueue(global::AgQueue.Models.CreateQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.CreateQueueResponse CreateQueue(global::AgQueue.Models.CreateQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateQueue, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.CreateQueueResponse> CreateQueueAsync(global::AgQueue.Models.CreateQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.CreateQueueResponse> CreateQueueAsync(global::AgQueue.Models.CreateQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateQueue, null, options, request);
      }
      public virtual global::AgQueue.Models.InitializeStorageResponse InitializeStorage(global::AgQueue.Models.InitializeStorageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeStorage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.InitializeStorageResponse InitializeStorage(global::AgQueue.Models.InitializeStorageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_InitializeStorage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.InitializeStorageResponse> InitializeStorageAsync(global::AgQueue.Models.InitializeStorageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return InitializeStorageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.InitializeStorageResponse> InitializeStorageAsync(global::AgQueue.Models.InitializeStorageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_InitializeStorage, null, options, request);
      }
      public virtual global::AgQueue.Models.DeleteQueueByIdResponse DeleteQueueById(global::AgQueue.Models.DeleteQueueByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.DeleteQueueByIdResponse DeleteQueueById(global::AgQueue.Models.DeleteQueueByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteQueueById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.DeleteQueueByIdResponse> DeleteQueueByIdAsync(global::AgQueue.Models.DeleteQueueByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.DeleteQueueByIdResponse> DeleteQueueByIdAsync(global::AgQueue.Models.DeleteQueueByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteQueueById, null, options, request);
      }
      public virtual global::AgQueue.Models.DeleteQueueByNameResponse DeleteQueueByName(global::AgQueue.Models.DeleteQueueByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.DeleteQueueByNameResponse DeleteQueueByName(global::AgQueue.Models.DeleteQueueByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteQueueByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.DeleteQueueByNameResponse> DeleteQueueByNameAsync(global::AgQueue.Models.DeleteQueueByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteQueueByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.DeleteQueueByNameResponse> DeleteQueueByNameAsync(global::AgQueue.Models.DeleteQueueByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteQueueByName, null, options, request);
      }
      public virtual global::AgQueue.Models.GetQueueInfoResponse GetQueueInfoById(global::AgQueue.Models.GetQueueInfoByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueueInfoById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.GetQueueInfoResponse GetQueueInfoById(global::AgQueue.Models.GetQueueInfoByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueueInfoById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.GetQueueInfoResponse> GetQueueInfoByIdAsync(global::AgQueue.Models.GetQueueInfoByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueueInfoByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.GetQueueInfoResponse> GetQueueInfoByIdAsync(global::AgQueue.Models.GetQueueInfoByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueueInfoById, null, options, request);
      }
      public virtual global::AgQueue.Models.GetQueueInfoResponse GetQueueInfoByName(global::AgQueue.Models.GetQueueInfoByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueueInfoByName(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.GetQueueInfoResponse GetQueueInfoByName(global::AgQueue.Models.GetQueueInfoByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetQueueInfoByName, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.GetQueueInfoResponse> GetQueueInfoByNameAsync(global::AgQueue.Models.GetQueueInfoByNameRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQueueInfoByNameAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.GetQueueInfoResponse> GetQueueInfoByNameAsync(global::AgQueue.Models.GetQueueInfoByNameRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetQueueInfoByName, null, options, request);
      }
      public virtual global::AgQueue.Models.StartTransactionResponse StartTransaction(global::AgQueue.Models.StartTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.StartTransactionResponse StartTransaction(global::AgQueue.Models.StartTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.StartTransactionResponse> StartTransactionAsync(global::AgQueue.Models.StartTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.StartTransactionResponse> StartTransactionAsync(global::AgQueue.Models.StartTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartTransaction, null, options, request);
      }
      public virtual global::AgQueue.Models.CommitTransactionResponse CommitTransaction(global::AgQueue.Models.CommitTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitTransaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.CommitTransactionResponse CommitTransaction(global::AgQueue.Models.CommitTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CommitTransaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.CommitTransactionResponse> CommitTransactionAsync(global::AgQueue.Models.CommitTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CommitTransactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.CommitTransactionResponse> CommitTransactionAsync(global::AgQueue.Models.CommitTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CommitTransaction, null, options, request);
      }
      public virtual global::AgQueue.Models.RollbackTransactionResponse RollbackTranaction(global::AgQueue.Models.RollbackTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackTranaction(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.RollbackTransactionResponse RollbackTranaction(global::AgQueue.Models.RollbackTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RollbackTranaction, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.RollbackTransactionResponse> RollbackTranactionAsync(global::AgQueue.Models.RollbackTransactionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RollbackTranactionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.RollbackTransactionResponse> RollbackTranactionAsync(global::AgQueue.Models.RollbackTransactionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RollbackTranaction, null, options, request);
      }
      public virtual global::AgQueue.Models.QueueMessageResponse QueueMessage(global::AgQueue.Models.QueueMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueueMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.QueueMessageResponse QueueMessage(global::AgQueue.Models.QueueMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_QueueMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.QueueMessageResponse> QueueMessageAsync(global::AgQueue.Models.QueueMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return QueueMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.QueueMessageResponse> QueueMessageAsync(global::AgQueue.Models.QueueMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_QueueMessage, null, options, request);
      }
      public virtual global::AgQueue.Models.DequeueMessageResponse DequeueMessage(global::AgQueue.Models.DequeueMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DequeueMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.DequeueMessageResponse DequeueMessage(global::AgQueue.Models.DequeueMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DequeueMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.DequeueMessageResponse> DequeueMessageAsync(global::AgQueue.Models.DequeueMessageRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DequeueMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.DequeueMessageResponse> DequeueMessageAsync(global::AgQueue.Models.DequeueMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DequeueMessage, null, options, request);
      }
      public virtual global::AgQueue.Models.PeekMessageByQueueResponse PeekMessageByQueue(global::AgQueue.Models.PeekMessageByQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PeekMessageByQueue(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.PeekMessageByQueueResponse PeekMessageByQueue(global::AgQueue.Models.PeekMessageByQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PeekMessageByQueue, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.PeekMessageByQueueResponse> PeekMessageByQueueAsync(global::AgQueue.Models.PeekMessageByQueueRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PeekMessageByQueueAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.PeekMessageByQueueResponse> PeekMessageByQueueAsync(global::AgQueue.Models.PeekMessageByQueueRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PeekMessageByQueue, null, options, request);
      }
      public virtual global::AgQueue.Models.PeekMessageByIdResponse PeekMessageById(global::AgQueue.Models.PeekMessageByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PeekMessageById(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::AgQueue.Models.PeekMessageByIdResponse PeekMessageById(global::AgQueue.Models.PeekMessageByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PeekMessageById, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.PeekMessageByIdResponse> PeekMessageByIdAsync(global::AgQueue.Models.PeekMessageByIdRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PeekMessageByIdAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::AgQueue.Models.PeekMessageByIdResponse> PeekMessageByIdAsync(global::AgQueue.Models.PeekMessageByIdRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PeekMessageById, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override QueueApiClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new QueueApiClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(QueueApiBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateQueue, serviceImpl.CreateQueue)
          .AddMethod(__Method_InitializeStorage, serviceImpl.InitializeStorage)
          .AddMethod(__Method_DeleteQueueById, serviceImpl.DeleteQueueById)
          .AddMethod(__Method_DeleteQueueByName, serviceImpl.DeleteQueueByName)
          .AddMethod(__Method_GetQueueInfoById, serviceImpl.GetQueueInfoById)
          .AddMethod(__Method_GetQueueInfoByName, serviceImpl.GetQueueInfoByName)
          .AddMethod(__Method_StartTransaction, serviceImpl.StartTransaction)
          .AddMethod(__Method_CommitTransaction, serviceImpl.CommitTransaction)
          .AddMethod(__Method_RollbackTranaction, serviceImpl.RollbackTranaction)
          .AddMethod(__Method_QueueMessage, serviceImpl.QueueMessage)
          .AddMethod(__Method_DequeueMessage, serviceImpl.DequeueMessage)
          .AddMethod(__Method_PeekMessageByQueue, serviceImpl.PeekMessageByQueue)
          .AddMethod(__Method_PeekMessageById, serviceImpl.PeekMessageById).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, QueueApiBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.CreateQueueRequest, global::AgQueue.Models.CreateQueueResponse>(serviceImpl.CreateQueue));
      serviceBinder.AddMethod(__Method_InitializeStorage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.InitializeStorageRequest, global::AgQueue.Models.InitializeStorageResponse>(serviceImpl.InitializeStorage));
      serviceBinder.AddMethod(__Method_DeleteQueueById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.DeleteQueueByIdRequest, global::AgQueue.Models.DeleteQueueByIdResponse>(serviceImpl.DeleteQueueById));
      serviceBinder.AddMethod(__Method_DeleteQueueByName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.DeleteQueueByNameRequest, global::AgQueue.Models.DeleteQueueByNameResponse>(serviceImpl.DeleteQueueByName));
      serviceBinder.AddMethod(__Method_GetQueueInfoById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.GetQueueInfoByIdRequest, global::AgQueue.Models.GetQueueInfoResponse>(serviceImpl.GetQueueInfoById));
      serviceBinder.AddMethod(__Method_GetQueueInfoByName, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.GetQueueInfoByNameRequest, global::AgQueue.Models.GetQueueInfoResponse>(serviceImpl.GetQueueInfoByName));
      serviceBinder.AddMethod(__Method_StartTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.StartTransactionRequest, global::AgQueue.Models.StartTransactionResponse>(serviceImpl.StartTransaction));
      serviceBinder.AddMethod(__Method_CommitTransaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.CommitTransactionRequest, global::AgQueue.Models.CommitTransactionResponse>(serviceImpl.CommitTransaction));
      serviceBinder.AddMethod(__Method_RollbackTranaction, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.RollbackTransactionRequest, global::AgQueue.Models.RollbackTransactionResponse>(serviceImpl.RollbackTranaction));
      serviceBinder.AddMethod(__Method_QueueMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.QueueMessageRequest, global::AgQueue.Models.QueueMessageResponse>(serviceImpl.QueueMessage));
      serviceBinder.AddMethod(__Method_DequeueMessage, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.DequeueMessageRequest, global::AgQueue.Models.DequeueMessageResponse>(serviceImpl.DequeueMessage));
      serviceBinder.AddMethod(__Method_PeekMessageByQueue, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.PeekMessageByQueueRequest, global::AgQueue.Models.PeekMessageByQueueResponse>(serviceImpl.PeekMessageByQueue));
      serviceBinder.AddMethod(__Method_PeekMessageById, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::AgQueue.Models.PeekMessageByIdRequest, global::AgQueue.Models.PeekMessageByIdResponse>(serviceImpl.PeekMessageById));
    }

  }
}
#endregion
