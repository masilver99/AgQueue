<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NWorkQueue.Common</name>
    </assembly>
    <members>
        <member name="T:NWorkQueue.Common.Extensions.ObjectExtensions">
            <summary>
            Extensions methods for use on Objects.
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.Extensions.ObjectExtensions.ThrowIfNull(System.Object,System.String)">
            <summary>
            Throws ArgumentNullException if object is null.
            </summary>
            <param name="obj">Object to perform null check on.</param>
            <param name="name">Param name to include in exception message.</param>
        </member>
        <member name="T:NWorkQueue.Common.Extensions.StringExtensions">
            <summary>
            Extensions methods to be used on stings.
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.Extensions.StringExtensions.StandardizeQueueName(System.String)">
            <summary>
            Standardizes the queue name so it's always consistent.
            </summary>
            <param name="rawQueueName">Raw queue name.</param>
            <returns>Standardized queue name.</returns>
        </member>
        <member name="T:NWorkQueue.Common.INWorkQueueClient">
            <summary>
            Interface for Client to implement.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.MessageState">
            <summary>
            Current state of a message.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.MessageState.Active">
            <summary>
            Gets active value.  Is the message is live and can be pulled from the queue.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.MessageState.InTransaction">
            <summary>
            Gets InTransaction.  Means the message is currently tied to a transaction, either during insert of during processing.  IOW, this message is currently being inserted or pulled from the queue.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.MessageState.Processed">
            <summary>
            Gets processed state. i.e. This message has been processed and will not be pulled.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.MessageState.Expired">
            <summary>
            Gets if Message has expired and will not be pulled.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.MessageState.RetryExceeded">
            <summary>
            Gets boolean representing if RetryExceeded. Message retry limit has been reached and message will no longer be pulled.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.Models.Message">
            <summary>
            Represents a Queue Message.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.Id">
            <summary>
            Gets generated unique message id.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.QueueId">
            <summary>
            Gets the id of the queue.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.TransactionId">
            <summary>
            Gets the id of the queue transaction.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.TransactionAction">
            <summary>
            Gets the transaction action. i.e. was this message added or pulled in the transaction.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.AddDateTime">
            <summary>
            Gets the datetime the message was added.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.CloseDateTime">
            <summary>
            Gets the datetime the message was closed, i.e. processed or cancelled or expired.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.Priority">
            <summary>
            Gets the priority of the message.  Lower is higher priority.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.MaxRetries">
            <summary>
            Gets number of attempts to have message processed, i.e. commited.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.Retries">
            <summary>
            Gets the number of rollbacks or timeouts before the message expires.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.ExpiryDateTime">
            <summary>
            Gets DateTime the message will expire.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.CorrelationId">
            <summary>
            Gets the interger correlation id, used by calling application.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.GroupName">
            <summary>
            Gets string group name.  Used by external application for grouping purposes.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.Payload">
            <summary>
            Gets actual message data.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.MessageState">
            <summary>
            Gets Message State, i.e. Active, closed, etc.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Message.Metadata">
            <summary>
            Gets string based metadata describing the message in more detail.  Optional.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.Models.Queue">
            <summary>
            Represents a Queue.
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.Models.Queue.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Common.Models.Queue"/> class.
            </summary>
            <param name="id">queue Id.</param>
            <param name="name">queue name.</param>
        </member>
        <member name="P:NWorkQueue.Common.Models.Queue.Id">
            <summary>
            Gets the unique queue id.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Queue.Name">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.Models.Transaction">
            <summary>
            Represents a Queue Transaction.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Transaction.Id">
            <summary>
            Gets the unique ID for a transaction.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Transaction.State">
            <summary>
            Gets a value indicating the state of the transaction.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Transaction.CreateDateTime">
            <summary>
            Gets the date and time the transaction was created.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Transaction.ExpiryDateTime">
            <summary>
            Gets the date and time the transaction will expire. e.g. after this datetime, the transaction will automatically rollback.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.Transaction.EndDateTime">
            <summary>
            Gets the date and time the transaction was closed, null if not closed.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.TransactionAction">
            <summary>
            Represents the action performed within a transaction.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionAction.Add">
            <summary>
            Item was added within a transaction (if rolledback, delete).
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionAction.Pull">
            <summary>
            Item was pulled within transaction, increment retry count if rolledback.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.TransactionResult">
            <summary>
            Result of transaction commital.
            </summary>
            <remarks>Only commits use the results since commits may have valid responses.  If a rollback fails, an exception should be thrown, at least for now.</remarks>
        </member>
        <member name="F:NWorkQueue.Common.TransactionResult.Success">
            <summary>
            Transaction was successfully committed.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionResult.Expired">
            <summary>
            Transaction expired before the commit could be completed.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionResult.Closed">
            <summary>
            The transaction was already closed.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionResult.NotFound">
            <summary>
            Transaction could not be found. Perhaps this should be an exception.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.TransactionState">
            <summary>
            The current state of a transaction.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionState.Unknown">
            <summary>
            This should never occur.  It means there is a serious bug.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionState.Active">
            <summary>
            Transaction is active.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionState.Commited">
            <summary>
            Transaction has been committed by user.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionState.RolledBack">
            <summary>
            Transaction was rolled back by user.
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionState.Expired">
            <summary>
            Transaction was automatically expired due to timeout.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.WorkQueueException">
            <summary>
            Exception thrown for unique WorkQueue exceptions.
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.WorkQueueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Common.WorkQueueException"/> class.
            </summary>
            <param name="message">Error message.</param>
        </member>
    </members>
</doc>
