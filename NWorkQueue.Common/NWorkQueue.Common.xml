<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NWorkQueue.Common</name>
    </assembly>
    <members>
        <member name="T:NWorkQueue.Common.INWorkQueueClient">
            <summary>
            Interface for Client to implement
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.IStorage">
            <summary>
            The interface for storing and retrieving queue information from a storage mechinism, usually a database
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.InitializeStorage(System.Boolean,System.String)">
            <summary>
            Called when Queue process starts.  Connections to the storage should be made here, etc.
            </summary>
            <param name="deleteExistingData">Should all existing queues and messages be deleted</param>
            <param name="settings">Could be connection string, could be empty, could be json settings.  Depends on the underlying storage class</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetMaxTransactionId">
            <summary>
            Get the id of the last transaction created, assuming the last ID is the largest
            </summary>
            <returns>Returns the  Transaction Id</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetMaxMessageId">
            <summary>
            Get the id of the last message created, assuming the last ID is the largest
            </summary>
            <returns>Returns the max message Id</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetMaxQueueId">
            <summary>
            Get the id of the last queue created, assuming the last ID is the largest
            </summary>
            <returns>Returns the max queue Id</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.StartTransaction(System.Int64,System.Int32)">
            <summary>
            Starts a Queue transaction (not a database one)
            </summary>
            <param name="newId">The id to use as primary key</param>
            <param name="expiryTimeInMinutes">When the transaction will expire</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.ExtendTransaction(System.Int64,System.Int32)">
            <summary>
            Extends the transaction's expiration datetime
            </summary>
            <param name="transId">The id of the transaction to update</param>
            <param name="expiryTimeInMinutes">The new expiration datetime</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.BeginStorageTransaction">
            <summary>
            Starts a storage (database) transaction, not a queue transaction
            </summary>
            <remarks>
            Not all Storage classes will have internal transactions, so this can return a dummy class that performs no actions
            </remarks>
            <returns>Returns a class represented by IStorageTransaction which can commit or rollbacl the transaction</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetTransactionById(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Retrieves Queue transaction data based on the transaction id
            </summary>
            <param name="transId">Id of the tranaction to lookup</param>
            <param name="storageTrans">Optional Storage transaction to perform this within</param>
            <returns>Transaction Model</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.CloseTransaction(System.Int64,NWorkQueue.Common.IStorageTransaction,System.DateTime)">
            <summary>
            Mark the Queue Transaction as closed
            </summary>
            <param name="transId">Queue Transaction to mark as closed</param>
            <param name="storageTrans">The db transaction to assodicate with this update</param>
            <param name="closeDateTime">Datetime transaction was closed</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.DeleteMessagesByTransId(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Delete all messages by their queue transaction id
            </summary>
            <param name="transId">Id of the queue transaction</param>
            <param name="storageTrans">Storage Transaction</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.CloseRetriedMessages(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Close messages that have too many retries
            </summary>
            <param name="transId">Queue transaction id</param>
            <param name="storageTrans">Storage Transaction</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.ExpireOlderMessages(System.Int64,NWorkQueue.Common.IStorageTransaction,System.DateTime)">
            <summary>
            Expire messages past their expiration date/time
            </summary>
            <param name="transId">Queue transaction id</param>
            <param name="storageTrans"></param>
            <param name="closeDateTime"></param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetQueueId(System.String)">
            <summary>
            Returns the id of the Queue.  If no queue is found, returns null
            </summary>
            <remarks>
            This search should be case sensitive, only use LIKE with SQLite
            </remarks>
            <param name="name">Name of the queue to lookup</param>
            <returns>Queue ID or null if queue not found</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.DoesQueueExist(System.Int64)">
            <summary>
            Does the 
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NWorkQueue.Common.IStorageTransaction">
            <summary>
            Represents a transaction used by the storage (usually a database transaction)
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.IStorageTransaction.Commit">
            <summary>
            Commits the transaction, usually this reprents a database transaction
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.IStorageTransaction.Rollback">
            <summary>
            Rollsback the transaction, usually this reprents a database transaction
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.Active">
            <summary>
            Active means the message is live and can be pulled from the queue
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.InTransaction">
            <summary>
            InTransaction means the message is currently tied to a transaction, either during insert of during processing.  IOW, this message is currently being inserted or pulled from the queue.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.Processed">
            <summary>
            This message has been processed and will not be pulled
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.Expired">
            <summary>
            Message has expired and will not be pulled
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.RetryExceeded">
            <summary>
            Message retry limit has been reached and message will no longer be pulled
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.Id">
            <summary>
            Generated unique message id
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.MaxRetries">
            <summary>
            Numerber of attempts to have message processed, i.e. commited
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.Retries">
            <summary>
            Number of Rollbacks or timeouts before the message expires
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.ExpiryDate">
            <summary>
            DateTime the message will expire
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.Data">
            <summary>
            Actual message data 
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.Models.QueueModel">
            <summary>
            Represents a Queue
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.Models.QueueModel.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Common.Models.QueueModel"/> class.
            </summary>
            <param name="id">queue Id</param>
            <param name="name">queue name</param>
        </member>
        <member name="P:NWorkQueue.Common.Models.QueueModel.Id">
            <summary>
            Gets the unique queue id
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.QueueModel.Name">
            <summary>
            Gets the name of the queue
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.Models.TransactionModel">
            <summary>
            Represents a Queue Transaction
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.Models.TransactionModel.#ctor(System.Int64,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Common.Models.TransactionModel"/> class.
            </summary>
            <param name="id">primary key</param>
            <param name="active">Is transaction active</param>
            <param name="createDateTime">Datetime transaction was created</param>
            <param name="expiryDateTime">Datetime transaction will expire</param>
        </member>
        <member name="P:NWorkQueue.Common.Models.TransactionModel.Id">
            <summary>
            Gets the unique ID for a transaction
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.TransactionModel.Active">
            <summary>
            Gets a value indicating whether gets the transaction's active state
            Is the transaction active?  e.g. has it been committed or rolled back
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.TransactionModel.CreateDateTime">
            <summary>
            Gets the date and time the transaction was creted
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.TransactionModel.ExpiryDateTime">
            <summary>
            Gets the date and time the transaction will expire. e.g. after this datetime, the transaction will automatically rollback
            </summary>
        </member>
    </members>
</doc>
