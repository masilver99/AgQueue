<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NWorkQueue.Common</name>
    </assembly>
    <members>
        <member name="T:NWorkQueue.Common.INWorkQueueClient">
            <summary>
            Interface for Client to implement
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.IStorage">
            <summary>
            The interface for storing and retrieving queue information from a storage mechinism, usually a database.
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.InitializeStorage(System.Boolean)">
            <summary>
            Called when Queue process starts.  Connections to the storage should be made here, etc.
            </summary>
            <param name="deleteExistingData">Should all existing queues and messages be deleted.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetMaxTransactionId">
            <summary>
            Get the id of the last transaction created, assuming the last ID is the largest.
            </summary>
            <returns>Returns the  Transaction Id.</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetMaxMessageId">
            <summary>
            Get the id of the last message created, assuming the last ID is the largest.
            </summary>
            <returns>Returns the max message Id.</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetMaxQueueId">
            <summary>
            Get the id of the last queue created, assuming the last ID is the largest.
            </summary>
            <returns>Returns the max queue Id.</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.StartTransaction(System.Int64,System.Int32)">
            <summary>
            Starts a Queue transaction (not a database one).
            </summary>
            <param name="newId">The id to use as primary key.</param>
            <param name="expiryTimeInMinutes">When the transaction will expire.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.ExtendTransaction(System.Int64,System.Int32)">
            <summary>
            Extends the transaction's expiration datetime.
            </summary>
            <param name="transId">The id of the transaction to update.</param>
            <param name="expiryTimeInMinutes">The new expiration datetime.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.BeginStorageTransaction">
            <summary>
            Starts a storage (database) transaction, not a queue transaction.
            </summary>
            <remarks>
            Not all Storage classes will have internal transactions, so this can return a dummy class that performs no actions.
            </remarks>
            <returns>Returns a class represented by IStorageTransaction which can commit or rollbacl the transaction.</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetTransactionById(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Retrieves Queue transaction data based on the transaction id.
            </summary>
            <param name="transId">Id of the tranaction to lookup.</param>
            <param name="storageTrans">Optional Storage transaction to perform this within.</param>
            <returns>Transaction Model.</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.CloseTransaction(System.Int64,NWorkQueue.Common.IStorageTransaction,System.DateTime)">
            <summary>
            Mark the Queue Transaction as closed.
            </summary>
            <param name="transId">Queue Transaction to mark as closed.</param>
            <param name="storageTrans">The db transaction to assodicate with this update.</param>
            <param name="closeDateTime">Datetime transaction was closed.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.DeleteMessagesByTransId(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Delete all messages by their queue transaction id.
            </summary>
            <param name="transId">Id of the queue transaction.</param>
            <param name="storageTrans">Storage Transaction.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.CloseRetriedMessages(System.Int64,NWorkQueue.Common.IStorageTransaction,System.DateTime)">
            <summary>
            Close messages that have too many retries.
            </summary>
            <param name="transId">Queue transaction id.</param>
            <param name="storageTrans">Storage Transaction.</param>
            <param name="closeDateTime">Datetime the message should be marked as closed.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.ExpireOlderMessages(System.Int64,NWorkQueue.Common.IStorageTransaction,System.DateTime,System.DateTime)">
            <summary>
            Expire messages past their expiration date/time.
            </summary>
            <param name="transId">Queue transaction id.</param>
            <param name="storageTrans">Storage Transaction.</param>
            <param name="closeDateTime">Datetime the message should be marked as closed.</param>
            <param name="expiryDateTime">Messages with expiry times before this will be marked closed.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.UpdateRetriesOnRollbackedMessages(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Update retry counts on rolledback transaction.
            </summary>
            <param name="transId">Queue transaction id.</param>
            <param name="storageTrans">Storage Transaction.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.CommitAddedMessages(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Commit added messages marking them as queued.
            </summary>
            <param name="transId">Queue transaction id.</param>
            <param name="storageTrans">Storage Transaction.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.CommitPulledMessages(System.Int64,NWorkQueue.Common.IStorageTransaction,System.DateTime)">
            <summary>
            Commit pulled messages marking them as complete.
            </summary>
            <param name="transId">Queue transaction id.</param>
            <param name="storageTrans">Storage Transaction.</param>
            <param name="commitDateTime">Datetime of the commit.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.CommitMessageTransaction(System.Int64,NWorkQueue.Common.IStorageTransaction,System.DateTime)">
            <summary>
            Commit a queue transaction.
            </summary>
            <param name="transId">Queue transaction id.</param>
            <param name="storageTrans">Storage Transaction.</param>
            <param name="commitDateTime">Datetime of the commit.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.AddQueue(System.Int64,System.String)">
            <summary>
            Create a new Queue in storage.
            </summary>
            <param name="nextId">ID to use as the queue id.</param>
            <param name="name">Queue name.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.DeleteQueue(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Delete a Queue and ALL messages in the Queue.
            </summary>
            <param name="id">Queue Id of the queue to delete.</param>
            <param name="storageTrans">The storage transaction to perform the operation under.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.AddMessage(System.Int64,NWorkQueue.Common.IStorageTransaction,System.Int64,System.Int64,System.Byte[],System.DateTime,System.String,System.Int32,System.Int32,System.Nullable{System.DateTime},System.Int32,System.String)">
            <summary>
            Add a message to the storage.
            </summary>
            <param name="transId">Queue Transaction ID.</param>
            <param name="storageTrans">Storage transaction.</param>
            <param name="nextId">The ID to be used at the primary id, i.e. the message id.</param>
            <param name="queueId">ID of the storage queue.</param>
            <param name="compressedMessage">Message data, compressed.</param>
            <param name="addDateTime">Datetime the message was added.</param>
            <param name="metaData">String metadata on message data.</param>
            <param name="priority">Message priority.</param>
            <param name="maxRetries">How many retries before expires.</param>
            <param name="expiryDateTime">Datetime the message will expire.</param>
            <param name="correlation">Correlation ID.</param>
            <param name="groupName">Group name.</param>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetMessageCount(System.Int64)">
            <summary>
            Returns message total message count for a queue.
            </summary>
            <param name="queueId">ID of the message queue.</param>
            <returns>Returns the count.</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.GetQueueId(System.String)">
            <summary>
            Returns the id of the Queue.  If no queue is found, returns null.
            </summary>
            <remarks>
            This search should be case sensitive, only use LIKE with SQLite.
            </remarks>
            <param name="name">Name of the queue to lookup.</param>
            <returns>Queue ID or null if queue not found.</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.DoesQueueExist(System.Int64)">
            <summary>
            Does a Quque exist for the specified id.
            </summary>
            <param name="id">Quque ID.</param>
            <returns>true if quque exists.</returns>
        </member>
        <member name="M:NWorkQueue.Common.IStorage.DeleteMessagesByQueueId(System.Int64,NWorkQueue.Common.IStorageTransaction)">
            <summary>
            Delete all messages in a specified queue.
            </summary>
            <param name="queueId">Queue id.</param>
            <param name="storageTrans">Storage transaction.</param>
        </member>
        <member name="T:NWorkQueue.Common.IStorageTransaction">
            <summary>
            Represents a transaction used by the storage (usually a database transaction)
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.IStorageTransaction.Commit">
            <summary>
            Commits the transaction, usually this reprents a database transaction
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.IStorageTransaction.Rollback">
            <summary>
            Rollsback the transaction, usually this reprents a database transaction
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.MessageState">
            <summary>
            Current state of a message
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.Active">
            <summary>
            Gets active value.  Is the message is live and can be pulled from the queue
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.InTransaction">
            <summary>
            Gets InTransaction.  Means the message is currently tied to a transaction, either during insert of during processing.  IOW, this message is currently being inserted or pulled from the queue.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.Processed">
            <summary>
            Gets processed state. i.e. This message has been processed and will not be pulled
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.Expired">
            <summary>
            Gets if Message has expired and will not be pulled
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.RetryExceeded">
            <summary>
            Gets boolean representing if RetryExceeded. Message retry limit has been reached and message will no longer be pulled
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.Name">
            <summary>
            Gets the message state string
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.MessageState.Value">
            <summary>
            Gets the message state ID
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.Models.MessageModel">
            <summary>
            Represents a Queue Message.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.Id">
            <summary>
            Gets generated unique message id.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.QueueId">
            <summary>
            Gets the id of the queue.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.TransactionId">
            <summary>
            Gets the id of the queue transaction.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.TransactionAction">
            <summary>
            Gets the transaction action. i.e. was this message added or pulled in the transaction.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.AddDateTime">
            <summary>
            Gets the datetime the message was added.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.CloseDateTime">
            <summary>
            Gets the datetime the message was closed, i.e. processed or cancelled or expired.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.Priority">
            <summary>
            Gets the priority of the message.  Lower is higher priority.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.MaxRetries">
            <summary>
            Gets number of attempts to have message processed, i.e. commited.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.Retries">
            <summary>
            Gets the number of rollbacks or timeouts before the message expires.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.ExpiryDate">
            <summary>
            Gets DateTime the message will expire.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.CorrelationId">
            <summary>
            Gets the interger correlation id, used by calling application.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.Group">
            <summary>
            Gets string group name.  Used by external application for grouping purposes.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.MessageModel.Data">
            <summary>
            Gets actual message data.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.Models.QueueModel">
            <summary>
            Represents a Queue.
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.Models.QueueModel.#ctor(System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Common.Models.QueueModel"/> class.
            </summary>
            <param name="id">queue Id.</param>
            <param name="name">queue name.</param>
        </member>
        <member name="P:NWorkQueue.Common.Models.QueueModel.Id">
            <summary>
            Gets the unique queue id.
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.QueueModel.Name">
            <summary>
            Gets the name of the queue.
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.Models.TransactionModel">
            <summary>
            Represents a Queue Transaction
            </summary>
        </member>
        <member name="M:NWorkQueue.Common.Models.TransactionModel.#ctor(System.Int64,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:NWorkQueue.Common.Models.TransactionModel"/> class.
            </summary>
            <param name="id">primary key</param>
            <param name="active">Is transaction active</param>
            <param name="createDateTime">Datetime transaction was created</param>
            <param name="expiryDateTime">Datetime transaction will expire</param>
        </member>
        <member name="P:NWorkQueue.Common.Models.TransactionModel.Id">
            <summary>
            Gets the unique ID for a transaction
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.TransactionModel.Active">
            <summary>
            Gets a value indicating whether gets the transaction's active state
            Is the transaction active?  e.g. has it been committed or rolled back
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.TransactionModel.CreateDateTime">
            <summary>
            Gets the date and time the transaction was creted
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.Models.TransactionModel.ExpiryDateTime">
            <summary>
            Gets the date and time the transaction will expire. e.g. after this datetime, the transaction will automatically rollback
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.TransactionAction">
            <summary>
            Represents the action performed within a transaction
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionAction.Add">
            <summary>
            Item was added within a transaction (if rolledback, delete)
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionAction.Pull">
            <summary>
            Item was pulled within transaction, increment retry count if rolledback
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.TransactionAction.Name">
            <summary>
            Gets transaction action name
            </summary>
        </member>
        <member name="P:NWorkQueue.Common.TransactionAction.Value">
            <summary>
            Gets transaction Action value / id
            </summary>
        </member>
        <member name="T:NWorkQueue.Common.TransactionResult">
            <summary>
            Result of transaction commital
            </summary>
            <remarks>Only commits use the results since commits may have valid responses.  If a rollback fails, an exception should be thrown, at least for now</remarks>
        </member>
        <member name="F:NWorkQueue.Common.TransactionResult.Success">
            <summary>
            Transaction was successfully committed
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionResult.Expired">
            <summary>
            Transaction expired before the commit could be completed
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionResult.Closed">
            <summary>
            The transaction was already closed
            </summary>
        </member>
        <member name="F:NWorkQueue.Common.TransactionResult.NotFound">
            <summary>
            Transaction could not be found. Perhaps this should be an exception
            </summary>
        </member>
    </members>
</doc>
